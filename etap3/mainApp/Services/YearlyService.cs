using Microsoft.EntityFrameworkCore;
using Bazy_danych.Models;
using Bazy_danych.Services.Interfaces;

namespace Bazy_danych.Services
{
    public class YearlyService : IYearlyService
    {
        private readonly AppDbContext _dbContext;
        public YearlyService(AppDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        public async Task<int> CreateYearly(YearlyData yearly)
        {
            _dbContext.Yearly.Add(yearly);
            await _dbContext.SaveChangesAsync();
            return yearly.ID_rekordu;
        }
        public async Task<int> UpdateYearly(YearlyData yearly)
        {
            _dbContext.Yearly.Update(yearly);
            return await _dbContext.SaveChangesAsync();
        }
        public async Task<int> DeleteYearly(int? id)
        {
            if (id == null)
                return 0;

            var yearly = await _dbContext.Yearly.FindAsync(id);
            if (yearly == null)
                return 0;

            _dbContext.Yearly.Remove(yearly);
            return await _dbContext.SaveChangesAsync();
        }
        public YearlyData GetYearlyById(int id)
        {
            return _dbContext.Yearly.Find(id);
        }
        public async Task<IEnumerable<YearlyData>> GetYearlysByCompanyId(int id)
        {
            return await _dbContext.Yearly
                //.Where(h => h.ID_firmy == id)
                .ToListAsync();
        }

        public async Task<int> New_Yearly(int company_id)
        {
            YearlyData New_Data = new YearlyData();
            New_Data.ID_firmy = company_id;

            var comp_data = _dbContext.Companies.Find(company_id);


            string name = comp_data.Nazwa_firmy.ToString();

            ProcessStartInfo start = new ProcessStartInfo();

            start.FileName = "python";
            start.Arguments = string.Format("\"{0}\" \"{1}\" \"{2}\" \"{3}\" \"{4}\"", "wwwroot\\scripts\\StockAPI.py", name, DateTime.Now.AddYears(-1).ToString("yyyy'-'MM'-'dd"), false.ToString().ToLower(), true.ToString().ToLower());
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true;
            string result;
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd();
                    result = reader.ReadToEnd();


                    Console.WriteLine("Standard Error: " + stderr);

                    string output = reader.ReadToEnd();
                    Console.WriteLine("Script Output: " + output);

                    if (float.TryParse(result, NumberStyles.Float, CultureInfo.InvariantCulture, out float cena))
                    {
                        New_Data.Cena = cena;
                    }
                    else
                    {
                        Console.WriteLine("Error converting output to float: " + result);
                    }
                }
            }

            Console.WriteLine("Result value: " + result);


            New_Data.Dzien = DateTime.Now.Date;

            await CreateYearly(New_Data);
            return 0;
        }


    }
}
